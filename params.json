{"name":"userinfo","tagline":"curl -X GET http://byoung@bigbluehat.com/","body":"userinfo - http://user@example.com/\r\n===================================\r\n\r\n    curl -X GET http://byoung@bigbluehat.com/\r\n\r\nI've been typing email addresses into browser\r\naddress bars for over a decade. Now, I want\r\nsomething back.\r\n\r\n## A User URI Scheme\r\n\r\n`mailto` and (more recently) `acct` provide\r\nmethods of identifying an entity (person, bot,\r\netc) by an email address.\r\n\r\nThe `userinfo` portion of a URI\r\n(per [RFC3986](http://tools.ietf.org/html/rfc3986#section-3.2.1)\r\nprovides for such a format in HTTP URLs:\r\n\r\n> The userinfo subcomponent may consist of a user name and, **optionally**,\r\n  scheme-specific information about how to gain authorization to access\r\n  the resource.\r\n\r\nThere's more in that spec and in the more recent\r\n`httpbis` that runs away from the use of this\r\n`userinfo` URI component, but there is untapped value here.\r\n\r\n## Initial Tests\r\n\r\nHTTP clients will send a URL containing a `userinfo`\r\ncomponent as an HTTP Authorization header. For the\r\nURL above, the outbound request looks like:\r\n\r\n    GET / HTTP/1.1\r\n    Authorization: Basic YnlvdW5nOg==\r\n    User-Agent: curl/7.26.0\r\n    Host: bigbluehat.com\r\n    Accept: */*\r\n\r\nThe server will treat this as an HTTP Basic\r\nAuthentication request. That Base64 encoded\r\nbit after the word \"Basic\" above is the username\r\n`byoung` without a colon. Most other clients\r\n(curl seems to be the \"purist\") will also include\r\na `:` in Base64 portion. This can be stripped\r\nserver-side of course, but should not be sent in\r\nthe first place (re:\r\n[RFC3986](http://tools.ietf.org/html/rfc3986#section-3.2.1)).\r\n\r\n## Yeah, so?\r\n\r\nFor me, this means a RESTful endpoint for myself.\r\nI intend to use\r\n[content negotiation](http://en.wikipedia.org/wiki/Content_negotiation)\r\nto deliver my profile pic (in various formats) and\r\nsocial or authentication related markup: FOAF, XRDS,\r\nand hCard + OpenID discovery meta tags (done, but\r\nneeds further testing and exploration).\r\n\r\nFor the web, my hope is this will prove a useful\r\npattern that could be adopted to more simply\r\nlocate a person's public content. It's easy to\r\nimagine profile URLs such as `http://bigbluehat@twitter.com/`\r\nwhich at the very least could [302](http://httpstatus.es/302) to my current\r\nTwitter profile: http://twitter.com/bigbluehat\r\n\r\n## Much more\r\n\r\nThere's much more to explore and explain, but\r\nthis idea has sat in my head far too long and\r\nI needed it out in the wild to make room for\r\nnew ones.\r\n\r\nMy hope is to work this toward an\r\n[Internet-Draft](http://www.ietf.org/id-info/)\r\nat the IETF where I'd love to see it become an\r\nRFC that people find useful, interesting, and\r\nat least inspring.\r\n\r\n## Contribute\r\n\r\nThe biggest need right now is client testing,\r\nreporting, and patching.\r\n\r\nI'll be documenting this idea further in this\r\nrepo in the coming weeks. For now, please use\r\nthe issues on this repo to send me your thoughts.\r\n\r\n## License\r\n\r\nAll code (forthcoming) will be licensed under the\r\nApache Foundation License 2.0.\r\n","google":"UA-80336-23","note":"Don't delete this file! It's used internally to help with page regeneration."}